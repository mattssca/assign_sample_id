install.packages(tidyverse)
install.packages('tidyverse')
install.packages("shiny")
shiny::runApp("path/to/your/app.R")
library(shiny)
install.packages(promises)
install.packages('promises')
shiny::runApp("path/to/your/app.R")
shiny::runApp("../Desktop/shiny/app.r")
install.packages("promises")
load("C:/Users/matts/Desktop/LundTaxonomy2023Classifier/data/sjodahl_2017.rda")
devtools::load_all(path = "../Desktop/LundTaxonomy2023Classifier/")
predicted = lundtax_predict_sub(this_data = sjodahl_2017, adjust = TRUE, impute = TRUE, include_data = TRUE)
View(predicted)
head(predicted$data)
head(predicted$data)[1:5]
head(predicted$predictions_5classes)[1:5]
head(predicted$predictions_7classes)[1:5]
head(predicted$subtype_scores)[1:5]
head(predicted$subtype_scores)[5]
head(predicted$subtype_scores)
head(predicted$scores)
head(predicted$scores)[1:5]
head(predicted$data)[1:5]
head(predicted$predictions_5classes)[1:5]
head(predicted$predictions_7classes)[1:5]
head(predicted$subtype_scores)
head(predicted$scores)[1:5]
devtools::install_github("mattssca/AssignSampleIDs")
devtools::install_github("mattssca/assign_sample_id")
# Load package
library(AssignSampleIDs)
# Example: load test data
test_data = AssignSampleIDs::test_data
# Run funciton on test data
result <- assign_sample_id(
this_data = test_data,
start_id = 100,
lab_id_col = "lab_id",
personal_id_col = "personal_id",
date_col = "date_of_sample",
verbose = TRUE
)
View(test_data)
View(result)
vignette <- readRDS("C:/Users/matts/Desktop/assign_sample_id/Meta/vignette.rds")
View(vignette)
library(testthat)
test_that("generate_test_data creates the correct number of samples", {
num_samples <- 100
result <- generate_test_data(
num_samples = num_samples,
num_unique_personal_ids = 10,
num_unique_dates = 5,
samples_per_combination = 2
)
expect_equal(nrow(result), num_samples)
})
test_that("generate_test_data returns a data frame", {
result <- generate_test_data(
num_samples = 50,
num_unique_personal_ids = 5,
num_unique_dates = 3,
samples_per_combination = 2
)
expect_s3_class(result, "data.frame")
})
test_that("generate_test_data includes required columns", {
result <- generate_test_data(
num_samples = 50,
num_unique_personal_ids = 5,
num_unique_dates = 3,
samples_per_combination = 2
)
expect_true(all(c("lab_id", "personal_id", "date_of_sample") %in% colnames(result)))
})
test_that("generate_test_data handles more samples than combinations", {
result <- generate_test_data(
num_samples = 200,
num_unique_personal_ids = 5,
num_unique_dates = 3,
samples_per_combination = 2
)
expect_equal(nrow(result), 200)
})
test_that("generate_test_data handles fewer samples than combinations", {
result <- generate_test_data(
num_samples = 10,
num_unique_personal_ids = 5,
num_unique_dates = 3,
samples_per_combination = 2
)
expect_equal(nrow(result), 10)
})
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2024-03-12")
)
library(tibble)
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2024-03-12")
)
result <- assign_sample_id(
this_data = test_data,
start_id = 100
)
View(result)
expect_equal(nrow(result), 3)
test_that("assign_sample_id assigns unique sample IDs", {
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2024-03-12")
)
result <- assign_sample_id(
this_data = test_data,
start_id = 100
)
expect_equal(nrow(result), 3)
expect_true(all(!is.na(result$sample_id)))
expect_equal(length(unique(result$sample_id)), 3)
})
test_that("assign_sample_id handles duplicate samples correctly", {
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "13KF85140"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2018-09-15")
)
result <- assign_sample_id(
this_data = test_data,
start_id = 100
)
expect_equal(nrow(result), 3)
expect_true(any(grepl("_1", result$sample_id)))
})
test_that("assign_sample_id assigns tumor annotations correctly", {
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2024-03-12")
)
result <- assign_sample_id(
this_data = test_data,
start_id = 100
)
expect_true(any(grepl("_B", result$sample_id)))
expect_true(is.na(result$tumor_n[1]))
})
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2024-03-12")
)
result <- assign_sample_id(
this_data = test_data,
start_id = 100
)
View(result)
test_that("assign_sample_id assigns tumor annotations correctly", {
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2024-03-12")
)
result <- assign_sample_id(
this_data = test_data,
start_id = 100
)
expect_true(any(grepl("_B", result$sample_id)))
})
test_that("assign_sample_id validates input columns", {
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128")
# Missing date_of_sample column
)
expect_error(
assign_sample_id(
this_data = test_data,
start_id = 100
),
"One or more specified columns do not exist in the incoming data."
)
})
test_that("assign_sample_id handles missing start_id", {
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2024-03-12")
)
expect_error(
assign_sample_id(
this_data = test_data
),
"No starting sample_id provided"
)
})
test_that("assign_sample_id returns the correct columns", {
test_data <- tibble(
lab_id = c("45KF98987", "13KF85140", "82KF36719"),
personal_id = c("19037644-5806", "19053341-4128", "19053341-4128"),
date_of_sample = c("2021-08-20", "2018-09-15", "2024-03-12")
)
result <- assign_sample_id(
this_data = test_data,
start_id = 100
)
expect_true(all(c("lab_id", "personal_id", "date_of_sample", "sample_id") %in% colnames(result)))
})
devtools::test()
setwd("C:/Users/matts/Desktop/assign_sample_id")
devtools::test()
devtools::install_github("mattssca/assign_sample_id")
# Load package
library(AssignSampleIDs)
# Example: load test data
test_data = AssignSampleIDs::test_data
big_test = generate_test_data(num_samples = 1000, num_unique_personal_ids = 800, num_unique_dates = 950, samples_per_combination = 950)
use_package("dplyr")
library(usethis)
use_package("dplyr")
big_test = generate_test_data(num_samples = 1000, num_unique_personal_ids = 800, num_unique_dates = 950, samples_per_combination = 2)
View(big_test)
big_test = generate_test_data(num_samples = 1000, num_unique_personal_ids = 800, num_unique_dates = 950, samples_per_combination = 100)
big_test = generate_test_data(num_samples = 100, num_unique_personal_ids = 800, num_unique_dates = 950, samples_per_combination = 80
big_test = generate_test_data(num_samples = 100, num_unique_personal_ids = 800, num_unique_dates = 950, samples_per_combination = 80
big_test = generate_test_data(num_samples = 100, num_unique_personal_ids = 800, num_unique_dates = 950, samples_per_combination = 80)
View(big_test)
# Generate a test data set with 100 samples, 10 unique personal IDs, 10 unique dates, and 5 repeats
test_data <- generate_test_data(num_samples = 100, num_unique_personal_ids = 10, num_unique_dates = 5, samples_per_combination = 3)
View(test_data)
# Generate a test data set with 100 samples, 10 unique personal IDs, 10 unique dates, and 5 repeats
test_data <- generate_test_data(num_samples = 100, num_unique_personal_ids = 80, num_unique_dates = 90, samples_per_combination = 3)
View(test_data)
# Generate a test data set with 100 samples, 10 unique personal IDs, 10 unique dates, and 5 repeats
test_data <- generate_test_data(num_samples = 100, num_unique_personal_ids = 80, num_unique_dates = 90, samples_per_combination = 50)
View(test_data)
# Generate a test data set with 100 samples, 10 unique personal IDs, 10 unique dates, and 5 repeats
test_data <- generate_test_data(num_samples = 100, num_unique_personal_ids = 80, num_unique_dates = 90, samples_per_combination = 1)
View(test_data)
# Generate a test data set with 100 samples, 10 unique personal IDs, 10 unique dates, and 5 repeats
test_data <- generate_test_data(num_samples = 100,
num_unique_personal_ids = 80,
num_unique_dates = 90,
samples_per_combination = 80)
View(test_data)
# Generate a test data set with 100 samples, 10 unique personal IDs, 10 unique dates, and 5 repeats
test_data <- generate_test_data(num_samples = 100,
num_unique_personal_ids = 100,
num_unique_dates = 100,
samples_per_combination = 80)
View(test_data)
# Generate a test data set with 100 samples, 10 unique personal IDs, 10 unique dates, and 5 repeats
test_data <- generate_test_data(num_samples = 100,
num_unique_personal_ids = 100,
num_unique_dates = 100,
samples_per_combination = 1)
View(test_data)
devtools::document()
#'   num_samples = 100,
#'   num_unique_personal_ids = 10,
#'   num_unique_dates = 5
#' )
#' head(test_data)
#'
#' @import dplyr
#'
#' @export
#'
generate_test_data <- function(num_samples,
num_unique_personal_ids,
num_unique_dates) {
# Generate unique personal IDs
unique_personal_ids <- sprintf("%08d-%04d",
sample(19000101:20201231, num_unique_personal_ids, replace = TRUE),
sample(1000:9999, num_unique_personal_ids, replace = TRUE))
# Generate unique dates
unique_dates <- as.Date("2016-01-01") + sample(0:3285, num_unique_dates, replace = TRUE)
# Randomly assign personal IDs and dates to samples
personal_ids <- sample(unique_personal_ids, num_samples, replace = TRUE)
dates <- sapply(personal_ids, function(id) {
if (runif(1) < 0.5) {
# 50% chance to reuse a date for the same personal ID
sample(unique_dates, 1)
} else {
sample(unique_dates, 1)
}
})
# Generate lab IDs
lab_ids <- sprintf("%02dKF%05d",
sample(10:99, num_samples, replace = TRUE),
sample(1:99999, num_samples, replace = TRUE))
# Combine into a data frame
data <- data.frame(
lab_id = lab_ids,
personal_id = personal_ids,
date_of_sample = as.Date(dates)
)
return(data)
}
# Generate a test data set with 100 samples, 10 unique personal IDs, 10 unique dates, and 5 repeats
test_data <- generate_test_data(num_samples = 100,
num_unique_personal_ids = 10,
num_unique_dates = 5)
View(test_data)
devtools::document()
# Run funciton on test data
result <- assign_sample_id(
this_data = test_data,
start_id = 100,
lab_id_col = "lab_id",
personal_id_col = "personal_id",
date_col = "date_of_sample",
verbose = TRUE
)
View(result)
