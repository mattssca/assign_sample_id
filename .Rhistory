install.packages(tidyverse)
install.packages('tidyverse')
install.packages("shiny")
shiny::runApp("path/to/your/app.R")
library(shiny)
install.packages(promises)
install.packages('promises')
shiny::runApp("path/to/your/app.R")
shiny::runApp("../Desktop/shiny/app.r")
install.packages("promises")
load("C:/Users/matts/Desktop/LundTaxonomy2023Classifier/data/sjodahl_2017.rda")
devtools::load_all(path = "../Desktop/LundTaxonomy2023Classifier/")
predicted = lundtax_predict_sub(this_data = sjodahl_2017, adjust = TRUE, impute = TRUE, include_data = TRUE)
View(predicted)
head(predicted$data)
head(predicted$data)[1:5]
head(predicted$predictions_5classes)[1:5]
head(predicted$predictions_7classes)[1:5]
head(predicted$subtype_scores)[1:5]
head(predicted$subtype_scores)[5]
head(predicted$subtype_scores)
head(predicted$scores)
head(predicted$scores)[1:5]
head(predicted$data)[1:5]
head(predicted$predictions_5classes)[1:5]
head(predicted$predictions_7classes)[1:5]
head(predicted$subtype_scores)
head(predicted$scores)[1:5]
setwd("C:/Users/matts/Desktop/assign_sample_id")
devtools::load_all()
AssignSampleIDs::generate_test_data(num_samples = 200, num_unique_personal_ids = 190, num_unique_dates = 195)
AssignSampleIDs::generate_test_data(num_samples = 1000, num_unique_personal_ids = 190, num_unique_dates = 195)
test_data = AssignSampleIDs::generate_test_data(num_samples = 1000, num_unique_personal_ids = 190, num_unique_dates = 195)
View(test_data)
test_data = AssignSampleIDs::generate_test_data(num_samples = 1000,
num_unique_personal_ids = 800,
num_unique_dates = 300)
View(test_data)
assigned = AssignSampleIDs::assign_sample_id(this_data = test_data,
start_id = 1,
verbose = TRUE)
View(assigned)
write.table(x = test_data,
file = "../test_sample_ids.txt",
quote = FALSE,
sep = '\t',
row.names = FALSE)
devtools::load_all()
assigned = AssignSampleIDs::assign_sample_id(this_data = test_data,
start_id = 1,
verbose = TRUE,
return_full = TRUE)
View(assigned)
View(test_data)
assigned = AssignSampleIDs::assign_sample_id(this_data = test_data,
personal_id_col = "sin",
start_id = 1,
verbose = TRUE,
return_full = TRUE)
colnames(test_data)
#create eror prone data
test_data_fail = test_data %>%
rename(labid = lab_id, sin = personal_id, date = date_of_sample) %>%
mutate(nonsense_column = 1000)
View(test_data_fail)
#create eror prone data
test_data_fail = test_data %>%
rename(labid = lab_id, sin = personal_id, date = date_of_sample) %>%
mutate(nonsense_column = 1000) %>%
mutate(what_am_i = rep(1:4))
#create eror prone data
test_data_fail = test_data %>%
rename(labid = lab_id, sin = personal_id, date = date_of_sample) %>%
mutate(nonsense_column = 1000) %>%
mutate(what_am_i = rep(1;4))
#create eror prone data
test_data_fail = test_data %>%
rename(labid = lab_id, sin = personal_id, date = date_of_sample) %>%
mutate(nonsense_column = 1000) %>%
mutate(what_am_i = "nothing")
#create eror prone data
test_data_fail = test_data %>%
mutate(labid = lab_id, sin = personal_id, date = date_of_sample) %>%
mutate(nonsense_column = 1000) %>%
mutate(what_am_i = "nothing")
write.table(x = test_data_fail,
file = "../test_sample_ids_fail.txt",
quote = FALSE,
sep = '\t',
row.names = FALSE)
#load library
library(rsconnect)
install.packages('rsconnect')
#load library
library(rsconnect)
#set up path
rsconnect::setAccountInfo(name = 'mattsada',
token = '5E4DA24AF146CA871C2F9E7657C54EEB',
secret = 'CMKrmQedHY5/ww0kRRYBQF8Npzr/vcclSTeQaphz')
#deploy
rsconnect::deployApp('shiny-app/')
#deploy
rsconnect::deployApp('shiny-app/')
#deploy
rsconnect::deployApp('shiny-app/')
packageDescription("dplyr")$RemoteType
packageDescription("shinyjs")$RemoteType
sapply(.libPaths(), function(lib) list.files(lib, pattern = "\\.github"))
#deploy
rsconnect::deployApp('shiny-app/')
